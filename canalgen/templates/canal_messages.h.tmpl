<%
    import datetime
    today = datetime.datetime.now()
%>\
/*
 * canal_messages.h
 * ${node.name.upper()}
 *
 *  WARNING: DO NOT EDIT. THIS WAS AN AUTOGENERATED FILE.
 *
 *  Created on: ${today.year}/${today.month}/${today.day}
 *     Authors: Samuel Parent, Dharak Verma
 *
 *                    ..::^~~~!!~~~^^:..
 *                .:^!7??JJJJJJJJJJJJ??7!~:.
 *              :~7?JJJ???????????????JJJJ??!^.
 *           .^7?JJJ???JJJJJJ??????????????JJJ?~:
 *          ^7JJ???????777777???JJJJJJJ???????JJ?~.
 *        .!JJ???????????7!~^::::^~!!7??JJ???????J7:
 *       :7JJJ??????????JJJJ??7~:    ..:~7?J??????J?^
 *      .7J???????????????????JJ?!.       :7J??????J?^
 *     .~J??????????????????JJJJ?!.       .7J???????J7.
 *     :?J?????????????JJJJ??7!^.      .:~???????????J~
 *     ^???????????JJJ??7~^:..      .:~7?JJ??????????J!.
 *     ^????????JJ?7~^:.        .:~!?JJJ?????????????J!.
 *     ^????????!^.          .:~7?JJJ????????????????J!.
 *     .7J????!.            :7?JJ?????????????????????^
 *      ~JJ?J7.             ~JJJJ???????????????????J!.
 *      .!J???^.            .^!7?JJJJJJ????????????J7:
 *       .!?J??7^.              .:^~!7???JJJJJ????J7:
 *        .^?JJJJ?7~.                 ..:^~~!7????!.
 *          .!?JJJJ?:                         ..::
 *            :~??!:
 *              ..
 */

#ifndef INC_CANAL_${node.name.upper()}_MESSAGES_H_
#define INC_CANAL_${node.name.upper()}_MESSAGES_H_

 /*********************************************************
 *                      INCLUDES
 *********************************************************/
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "canal_types.h"

/*********************************************************
*                        ENUMS
*********************************************************/
<%
max_msg_len = 0
for message in can_db.messages:
    if not ((node.name in message.receivers) or (node.name in message.senders)): 
        continue
    if len(message.name) > max_msg_len:
        max_msg_len = len(message.name)
msg_space = max_msg_len + 8
%>\

typedef enum {
    UNKNOWN_CANAL_ID =${" " * (msg_space - len("UNKNOWN"))}((uint32_t) 0x000),
% for message in can_db.messages:
<% if not ((node.name in message.receivers) or (node.name in message.senders)): continue %>\
    ${message.name.upper()}_CANAL_ID =${" " * (msg_space - len(message.name))}((uint32_t) ${hex(message.frame_id)}),
%endfor
} TeMessageID;

/*********************************************************
*                     MESSAGE STRUCTS
*********************************************************/
% for message in can_db.messages:
<% 
    if not ((node.name in message.receivers) or (node.name in message.senders)):
        continue
    if message.cycle_time == None: 
        cycle_time = "Undefined"
    else: 
        cycle_time = message.cycle_time
    if message.bus_name == None: 
        bus_name = "Undefined"
    else: 
        bus_name = message.bus_name
    
    receivers = list(message.receivers)
    senders = list(message.senders)
%>\
/** 
 * Message: ${message.name}
 * Senders: ${senders}
 * Receivers: ${receivers}
 * Cycle Time: ${cycle_time}
 * Bus: ${bus_name}
 */
typedef struct ${message.name} {\
    %for signal in message.signals:
    <%if signal.unit == "": signal.unit = "None"%>
    // Unit: ${signal.unit}
    ${sig_types[message.name+signal.name]} ${signal.name};\
%endfor

}Ts${message.name};

%endfor

/*********************************************************
*                       MESSAGE MACROS
*********************************************************/
<%
    num_rx_messages, num_tx_messages, total_messages = 0, 0, 0
    for message in can_db.messages:
        if node.name in message.receivers:
            num_rx_messages+=1
        if node.name in message.senders:
            num_tx_messages+=1
        if node.name in message.receivers or node.name in message.senders:
            total_messages+=1
%>\
#define NUM_RX_MESSAGES    (${num_rx_messages})
#define NUM_TX_MESSAGES    (${num_tx_messages})
#define TOTAL_MESSAGES     (${total_messages})

%for message in can_db.messages:
<% if not ((node.name in message.receivers) or (node.name in message.senders)): continue %>\
#define ${message.name.upper()}_DATA_LENGTH${" " * (msg_space - len(message.name))}(${message.length})
%endfor
/*********************************************************
*                       SIGNAL MACROS
*********************************************************/
%for message in can_db.messages:
<% if not ((node.name in message.receivers) or (node.name in message.senders)): continue %>\
// Message: ${message.name}

%for signal in message.signals:
// Signal: ${signal.name}
#define ${message.name.upper()}_${signal.name.upper()}_START    (${signal.start})
#define ${message.name.upper()}_${signal.name.upper()}_LENGTH   (${signal.length})
#define ${message.name.upper()}_${signal.name.upper()}_FACTOR   (${signal.scale})
#define ${message.name.upper()}_${signal.name.upper()}_OFFSET   (${signal.offset})

%endfor
%endfor

/*********************************************************
*               PUBLIC FUNCTION DECLARATIONS
*********************************************************/
%for message in can_db.messages:
<% if not ((node.name in message.receivers) or (node.name in message.senders)): continue %>\
void Print_${message.name}(void);
%endfor

TeCanALRet Print_Message(uint32_t *ID);
TeCanALRet GetTxDataLength(TeMessageID *ID, uint32_t *dlc);
TeCanALRet MarshalBinary(TeMessageID *ID, uint8_t* rawData);
TeCanALRet UnmarshalBinary(uint32_t *ID, uint8_t* txData);

#endif /* INC_CANAL_${node.name.upper(

)}_MESSAGES_H_ */
