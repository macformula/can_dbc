<%
    import datetime
    today = datetime.datetime.now()
%>\
/*
 * canal_messages.c
 * ${node.name.upper()}
 *
 *  WARNING: DO NOT EDIT. THIS WAS AN AUTOGENERATED FILE.
 *
 *  Created on: ${today.year}/${today.month}/${today.day} 
 *     Authors: Samuel Parent, Dharak Verma
 *
 *                    ..::^~~~!!~~~^^:..
 *                .:^!7??JJJJJJJJJJJJ??7!~:.
 *              :~7?JJJ???????????????JJJJ??!^.
 *           .^7?JJJ???JJJJJJ??????????????JJJ?~:
 *          ^7JJ???????777777???JJJJJJJ???????JJ?~.
 *        .!JJ???????????7!~^::::^~!!7??JJ???????J7:
 *       :7JJJ??????????JJJJ??7~:    ..:~7?J??????J?^
 *      .7J???????????????????JJ?!.       :7J??????J?^
 *     .~J??????????????????JJJJ?!.       .7J???????J7.
 *     :?J?????????????JJJJ??7!^.      .:~???????????J~
 *     ^???????????JJJ??7~^:..      .:~7?JJ??????????J!.
 *     ^????????JJ?7~^:.        .:~!?JJJ?????????????J!.
 *     ^????????!^.          .:~7?JJJ????????????????J!.
 *     .7J????!.            :7?JJ?????????????????????^
 *      ~JJ?J7.             ~JJJJ???????????????????J!.
 *      .!J???^.            .^!7?JJJJJJ????????????J7:
 *       .!?J??7^.              .:^~!7???JJJJJ????J7:
 *        .^?JJJJ?7~.                 ..:^~~!7????!.
 *          .!?JJJJ?:                         ..::
 *            :~??!:
 *              ..
 */
 
<%
max_msg_len = 0
for message in can_db.messages:
    if not ((node.name in message.receivers) or (node.name in message.senders)): 
        continue
    if len(message.name) > max_msg_len:
        max_msg_len = len(message.name)
msg_space = max_msg_len + 4
%>\

 /*********************************************************
 *                      INCLUDES
 *********************************************************/
#include <stdint.h>
#include "canal_messages.h"

/*********************************************************
 *                       MACROS
 *********************************************************/
#define CANAL_DATA_BITS (64U)

// CANAL_BIT_MASK will output a mask with (__length__) number of 1's
// e.g.: CANAL_BIT_MASK(5) = 0b0001'1111
#define CANAL_BIT_MASK(__length__) \
	(UINT64_MAX >> (CANAL_DATA_BITS - __length__))
    
// CANAL_BIT_INDEX_BE will take a bit index and convert it to work with big endian data
#define CANAL_BIT_INDEX_BE(__idx__) \
	((7 - ((__idx__) % 8)) + (((__idx__) / 8) * 8))

// CANAL_CLEAR_BITS will output the contents of (__data__) with bits from (__start__)
// to (__start__+__length__) set to 0
#define CANAL_CLEAR_BITS(__data__, __start__, __length__) \
	(~((CANAL_BIT_MASK(__length__) << __start__)) & (__data__))

// CANAL_GET_BITS will output the bits from (__data__) at bit positions (__start__)
// to (__start__+__length__)
#define CANAL_GET_BITS(__data__, __start__, __length__) \
	((__data__ >>  __start__) & CANAL_BIT_MASK(__length__))

// CANAL_SET_BITS will take the first (__length__) bits from (__input__) and set them
// to (__output__) from bit position (__start__) to (__start__ + __length__)
#define CANAL_SET_BITS(__input__, __output__, __start__, __length__) \
	(CANAL_CLEAR_BITS(__output__, __start__, __length__) | ((uint64_t)(__input__) & CANAL_BIT_MASK(__length__)) << __start__)

// CANAL_TWOS_COMPLEMENT will take the twos complement of (__data__)
#define CANAL_TWOS_COMPLEMENT(__data__, __length__) (((~(__data__))+1) & CANAL_BIT_MASK(__length__))

// CANAL_IS_NEGATIVE checks the msb to see if (__data__) is negative
#define CANAL_IS_NEGATIVE(__data__, __length__) (((__data__) & ((uint64_t)1 << (__length__-1))) != 0)

// CANAL_TO_SIGNED converts (__data__) to a signed value
#define CANAL_TO_SIGNED(__data__, __length__)   ((signed)(CANAL_IS_NEGATIVE(__data__, __length__) ? \
-(CANAL_TWOS_COMPLEMENT(__data__, __length__)) : \
__data__))

    
/*********************************************************
*                 PRIVATE STRUCT DEFINITIONS
*********************************************************/
%for message in can_db.messages:
<% if not ((node.name in message.receivers) or (node.name in message.senders)): continue %>\
static volatile Ts${message.name}${" " * (msg_space - len(message.name))}${message.name};
%endfor

/*********************************************************
*                    ACCESSOR FUNCTIONS
*********************************************************/
%for message in can_db.messages:
<% if not ((node.name in message.receivers) or (node.name in message.senders)): continue %>\
// Message: ${message.name}
Ts${message.name} get${message.name}() {
	return ${message.name};
}

void set${message.name}(Ts${message.name} newValue) {
	${message.name} = newValue;
}

%endfor
/*********************************************************
 *                    HELPER FUNCTIONS
 *********************************************************/
static uint64_t getDataWordFromByteArray(uint8_t* rawData) {
	uint64_t ret = 0;

	for (int8_t i = 7; i >= 0; i--) {
		ret <<= 8;
		ret += rawData[i];
	}

	return ret;
}

static void setDataWordIntoByteArray(uint64_t dataWord, uint8_t *dataOutput) {
	for (int8_t i = 0; i < 8; i++) {
		dataOutput[i] = (uint8_t) (dataWord & CANAL_BIT_MASK(8));
		dataWord >>= 8;
	}
}

static uint64_t shift_endianness(uint64_t val, uint8_t num_bits) {
	unsigned long long result = 0;
	unsigned long long temp_value = val;
	unsigned int num_bytes = (num_bits + 7) / 8;
	unsigned int num_shifts = (num_bytes - 1) * 8;
	
	for (unsigned int i = 0; i < num_bytes; ++i) {
		result |= ((temp_value >> (num_shifts - (i * 8))) & 0xFFULL) << (i * 8);
	}

	return result;
}

/*********************************************************
 *                    CAN FUNCTIONS
 *********************************************************/
% for message in can_db.messages:
<% if not (node.name in message.receivers): continue %>\
TeCanALRet Unmarshal_${message.name}(uint8_t *RxData) {
	uint64_t data;
	Ts${message.name} temp;

	data = getDataWordFromByteArray(RxData);
    
	//  Read raw bits
    % for signal in message.signals:
        % if signal.is_signed:
            % if signal.byte_order == "big_endian":
        temp.${signal.name} = shift_endianness(CANAL_TO_SIGNED(CANAL_GET_BITS(data,
            CANAL_BIT_INDEX_BE(${message.name.upper()}_${signal.name.upper()}_START),
            ${message.name.upper()}_${signal.name.upper()}_LENGTH),
            ${message.name.upper()}_${signal.name.upper()}_LENGTH), 
            ${message.name.upper()}_${signal.name.upper()}_LENGTH);
            % else:
        temp.${signal.name} = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
            ${message.name.upper()}_${signal.name.upper()}_START,
            ${message.name.upper()}_${signal.name.upper()}_LENGTH),
            ${message.name.upper()}_${signal.name.upper()}_LENGTH);
            % endif
        %else:
            % if signal.byte_order == "big_endian":
        temp.${signal.name} = shift_endianness(CANAL_GET_BITS(data,
            CANAL_BIT_INDEX_BE(${message.name.upper()}_${signal.name.upper()}_START),
            ${message.name.upper()}_${signal.name.upper()}_LENGTH),
            ${message.name.upper()}_${signal.name.upper()}_LENGTH);
            % else:
        temp.${signal.name} = CANAL_GET_BITS(data,
            ${message.name.upper()}_${signal.name.upper()}_START,
            ${message.name.upper()}_${signal.name.upper()}_LENGTH);
            % endif
        % endif
            
    % endfor
	//  Apply linear conversion
    %for signal in message.signals:
	temp.${signal.name} = (temp.${signal.name}
			* ${message.name.upper()}_${signal.name.upper()}_FACTOR)
			+ ${message.name.upper()}_${signal.name.upper()}_OFFSET; 
            
    % endfor
	//  Writing to global struct instance
	${message.name} = temp;

	return CANAL_OK;
}
% endfor

% for message in can_db.messages:
<% if not (node.name in message.senders): continue %>\
TeCanALRet Marshal_${message.name}(uint8_t *TxData) {
	uint64_t dataWord = 0;
	Ts${message.name} temp;
	TeCanALRet ret;

	temp = ${message.name};
    
    // Reverse linear conversion
    % for signal in message.signals:
	temp.${signal.name} = (temp.${signal.name}
			- ${message.name.upper()}_${signal.name.upper()}_OFFSET)
			/ ${message.name.upper()}_${signal.name.upper()}_FACTOR;
            
    % endfor
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
    % for signal in message.signals:
	dataWord = CANAL_SET_BITS(temp.${signal.name}, dataWord,
            % if signal.byte_order == "big_endian":
            CANAL_BIT_INDEX_BE(${message.name.upper()}_${signal.name.upper()}_START),
            % else:
            //${signal.byte_order}
            ${message.name.upper()}_${signal.name.upper()}_START,
            % endif
			${message.name.upper()}_${signal.name.upper()}_LENGTH);
            
    % endfor
	setDataWordIntoByteArray(dataWord, TxData);

	return CANAL_OK;
}
% endfor

/*********************************************************
 *               FUNCTION POINTER TABLE
 *********************************************************/
static const struct {
	TeMessageID ID;
	BinaryUnmarshaller *Unmarshal;
} CANAL_RX_MESSAGE_TABLE[NUM_RX_MESSAGES] = {
%for message in can_db.messages:
<% if not (node.name in message.receivers): continue %>\
	{ ${message.name.upper()}_CANAL_ID,${" " * (msg_space - len(message.name))}&Unmarshal_${message.name} },
% endfor
};

static const struct {
	TeMessageID ID;
	BinaryMarshaller *Marshal;
    uint32_t dlc;
} CANAL_TX_MESSAGE_TABLE[NUM_TX_MESSAGES] = {
% for message in can_db.messages:
<% if not (node.name in message.senders): continue %>\
	{ ${message.name.upper()}_CANAL_ID,${" " * (msg_space - len(message.name))}&Marshal_${message.name},${" " * (msg_space - len(message.name))}${message.name.upper()}_DATA_LENGTH },
% endfor
};

static const struct {
	TeMessageID ID;
	CanALPrinter* printer;
} CANAL_PRINTER_TABLE[TOTAL_MESSAGES] = {
% for message in can_db.messages:
<% if not (node.name in message.senders or node.name in message.receivers): continue %>\
	{ ${message.name.upper()}_CANAL_ID,${" " * (msg_space - len(message.name))}&Print_${message.name} },
% endfor
};

/*********************************************************
 *           FUNCTION POINTER TABLE GETTERS
 *********************************************************/
static TeCanALRet getBinaryUnmarshaller(uint32_t *ID, BinaryUnmarshaller **pUnmarshal) {
	for (int i = 0; i < NUM_RX_MESSAGES; i++) {
		if ((*ID) == CANAL_RX_MESSAGE_TABLE[i].ID) {
			*pUnmarshal = CANAL_RX_MESSAGE_TABLE[i].Unmarshal;

			return CANAL_OK;
		}
	}

	return CANAL_UNSUPPORTED_RX_MESSAGE;
}

static TeCanALRet getBinaryMarshaller(TeMessageID *ID, BinaryMarshaller **pMarshal) {
	for (int i = 0; i < NUM_TX_MESSAGES; i++) {
		if ((*ID) == CANAL_TX_MESSAGE_TABLE[i].ID) {
			*pMarshal = CANAL_TX_MESSAGE_TABLE[i].Marshal;

			return CANAL_OK;
		}
	}

	return CANAL_UNSUPPORTED_TX_MESSAGE;
}

/*********************************************************
 *             PUBLIC FUNCTION DEFINITIONS
 *********************************************************/
% for message in can_db.messages:
<% if not (node.name in message.senders or node.name in message.receivers): continue %>\
void Print_${message.name}() {
	char* sep ="\n\r\t";

	CANAL_PRINT("MESSAGE: ${message.name}");
    % for signal in message.signals:
    <%
		if sig_types[message.name+signal.name] == "float": 
			type_specifier = "%f"
		elif sig_types[message.name+signal.name] == "double": 
			type_specifier = "%lf"
		elif sig_types[message.name+signal.name] == "uint32_t":
			type_specifier = "%lu"
		elif sig_types[message.name+signal.name] == "uint64_t":
			type_specifier = "%llu"
		elif sig_types[message.name+signal.name] == "int32_t":
			type_specifier = "%ld"
		elif sig_types[message.name+signal.name] == "int64_t":
			type_specifier = "%lld"
		elif not signal.is_signed:
			type_specifier = "%u"
		else:
			type_specifier = "%d"
    %>\
CANAL_PRINT("%s${signal.name}: ${type_specifier}", sep, ${message.name}.${signal.name});
    % endfor
    CANAL_PRINT("\n\r");
}
% endfor

TeCanALRet Print_Message(uint32_t *ID) {
	CanALPrinter* print;

	for (int i = 0; i < TOTAL_MESSAGES; i++) {
		if ((*ID) == CANAL_PRINTER_TABLE[i].ID) {
			print = CANAL_PRINTER_TABLE[i].printer;

			(*print)();

			return CANAL_OK;
		}
	}

	return CANAL_UNSUPPORTED_TX_MESSAGE;
}

TeCanALRet GetTxDataLength(TeMessageID *ID, uint32_t *dlc) {
	for (int i = 0; i < NUM_TX_MESSAGES; i++) {
			if ((*ID) == CANAL_TX_MESSAGE_TABLE[i].ID) {
				*dlc = CANAL_TX_MESSAGE_TABLE[i].dlc;

				return CANAL_OK;
			}
		}

    return CANAL_UNSUPPORTED_TX_MESSAGE;
}

// UnmarshalBinary acts as a generic binary unmarshaller
TeCanALRet UnmarshalBinary(uint32_t *ID, uint8_t* rawData) {
	BinaryUnmarshaller* unmarshal;
	TeCanALRet ret;
 
	if ((ret = getBinaryUnmarshaller(ID, &unmarshal)) != CANAL_OK)
		return ret;
 
	return (*unmarshal)(rawData);
}

// MarshalBinary acts as a generic binary marshaller
TeCanALRet MarshalBinary(TeMessageID *ID, uint8_t* txData) {
	BinaryMarshaller* marshal;
	TeCanALRet ret;
 
	if ((ret = getBinaryMarshaller(ID, &marshal)) != CANAL_OK) return ret;
 
	return (*marshal)(txData);
}

